---
layout:     post
title:      "MVP 在实际工作中如何应用？"
subtitle:   " \"Minimum Viable Product\""
date:       2017-06-18 12:00:00
author:     "Shane"
header-img: "img/Material-design.jpg"
tags:
    - 产品
    - 产品经理
    - MVP
    - 读书笔记
---


Eric Ries 在《精益创业》中提到 **MVP（minimum viable product）概念**，意即"最小化的可行性产品" -- 花最少的力气、最短的开发时间建立一个产品原型，这个产品原型需要经历一次完整的 __BML（开发 - 测量 - 认知）__ 循环，以此帮助认清对用户需求的理解是不是正确，快速试错。

<img src="/img/in-post/Minimum-Viable-Product/mvp.jpg" width="100%">

关于 __MVP__ 有很多成功的案例：美国鞋类第一大电商zappos最开始建网站后没有马上进货，为了验证是否有网上买鞋的需求，他们等有人下单后直接去实体店里买来后再邮寄给客户；airbnb最开始是两个创始人在自己房间里摆了三个床垫就把网站挂出去了；最著名的是40亿美金估值的dropbox，只做了一个视频说描述了一下要做的服务，什么都没有做的情况下，根据视频点击量验证这个产品会很有用户需求，于是开始融资开发。

相信很多 __产品经理__ 都看过《精益创业》，也都赞同 MVP 理论，但实际上 MVP 做起来比看上去要困难的多，在工作中经常还会觉得 MVP 和用户体验的冲突的。

因为在平时产品设计过程中，很多产品经理都通过把自己想象成用户，来设计要达到某个目标需要怎样的功能流程，并在此基础上补充上异常流程和分支流程的处理逻辑。当需要在所有这些功能中排定优先级，决定哪些功能应该出现在 MVP 版本里面的时候，就很为难，觉得无论删哪一个都会破坏产品的的完整性。

---

### 01 根据需求判断

我们大都是到了设计完功能的时候才去想怎么 MVP ，而真正确定是不是应该 MVP 应该是在我们需要验证什么问题的时候就开始了。

我们拿到一个需求，分析他的核心假设是 __可以确定的__，还是 __需要线上用户验证的__。如果是 __可以确定的__，其实就不需要采用 MVP，如果是 __需要线上用户验证的__，才适合用 MVP 的方式。

之前做二手车交易的时候做过两个项目，一个适合，一个不适合：

##### 寄售车源

我们是希望通过寄售的模式为第一次未成交的车源找到感兴趣的车商，并通过现场议价的方式促成合作，这里面包含了几个核心假设：    

1. 车商是否愿意花时间在这些车源上？    
2. 车主在没有价格保证的情况下是否愿意到店？    
3. 车商是否有意愿一台一台的议价？

这三个假设都是很拿不准，应该坚决的使用 MVP 的方式实验，客户端增加这部分车源的展示，后台可能就是一个记录并能导出 Excel 的方式支持任务流转。

##### 车牌遮挡

我是希望通过图像识别，对平台上的车辆的车牌进行自动遮挡。对于这个需求我们希望是：通过系统实现车牌的自动遮挡能够提升效率。这个问题的答案其实是十分明确的，所以我们应该直接交付一个完整的产品，包括自动遮挡的流程，以及自动遮挡出现 badcase 之后的发现和修复流程。

---

### 02 决策者参与

MVP 其实是一种授权要求很高的方法，实施 MVP ，我们需要一个可以做决策的人，可以看到《精益创业》中那些成功的案例无一不是创始人直接参与的。因为团队中一定存在着信息不对称，如果决策者没有参与进来，很可能会导致 MVP 在一开始就选错了要解决的问题。

因此作为产品经理要做好向上沟通的工作，至少确保在四件事情上和决策者达成共识：

1. 对于要解决的问题达成共识；
2. 对于要采用的方案达成共识；
2. 对于 MVP 方案对品牌和用户的影响达成共识；
3. 对于 MVP 方案对合作部门的影响达成共识；

---

### 03 测试环境支持

实施 MVP 最好能有灰度发布的能力支持，尤其是对于已经有一定用户量的产品。我们应该追求在影响最少用户的情况下完成需求假设的验证。

最好的 MVP 是能像 Dropbox 一样，不用通过线上发布，只通过 Demo 就能收集到足够决策的反馈信息。如果一定需要通过线上用户来实现反馈收集，那就需要注意两点：

1. 尽量通过灰度发布，意即选择一小部分用户发布新的功能，这样可以在不影响大多数线上用户的情况下，获取线上用户的反馈。

2. 充分设计和用户接触的界面和流程，简化后端逻辑流程，就好我在上面提到的寄售车源的例子就属于这个类型。这样在能在尽量减少开发的情况下，保证用户所见的完成度。

---

### 04 呓语

最后推荐一本书《设计冲刺：谷歌风投如何5天完成产品迭代》，因为 Eric Ries 在《精益创业》中只是讲了 MVP 的概念，并没有展开讲如果要设计一个 MVP 的解决方案应该如何操作。我觉得 Jake Knapp 和 John Zeratsky 的《设计冲刺》正好是对这一部分的补充，虽然在这本书中，两个作者采用的 __设计冲刺__ 这个新的概念，但是其本质也是一种通过最小成本设计一个产品原型，来验证核心假设的准确性。










